name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pystray pillow
        pip list
    
    - name: Show Python info
      run: |
        python --version
        python -c "import sys; print('Python path:', sys.executable)"
        python -c "import tkinter; print('Tkinter available')"
    
    - name: Build executable
      run: |
        echo "Building on $RUNNER_OS..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          echo "Building Windows executable..."
          python -m PyInstaller --onefile --windowed --name "英语学习助手" main.py
        elif [ "$RUNNER_OS" = "macOS" ]; then
          echo "Building macOS executable..."
          if [ -f "build_mac.spec" ]; then
            python -m PyInstaller build_mac.spec
          else
            echo "build_mac.spec not found, using default spec..."
            python -m PyInstaller --onefile --windowed --name "英语学习助手" main.py
          fi
        else
          echo "Building Linux executable..."
          python -m PyInstaller --onefile --name "英语学习助手" main.py
        fi
    
    - name: List build artifacts
      run: |
        echo "Build artifacts:"
        if [ -d "dist" ]; then
          ls -la dist/
          echo "Executable size:"
          du -h dist/*
        else
          echo "dist directory not found!"
          ls -la
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 英语学习助手-${{ runner.os }}
        path: dist/
        retention-days: 30
        if-no-files-found: error 