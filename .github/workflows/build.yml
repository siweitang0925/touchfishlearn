name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [3.11]

    # 设置环境变量解决中文乱码问题
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pystray pillow
        pip list
    
    - name: Show Python info
      shell: bash
      run: |
        python --version
        python -c "import sys; print('Python path:', sys.executable)"
        python -c "import tkinter; print('Tkinter available')"
    
    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "Building on Windows..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Files in current directory:"
        Get-ChildItem
        
        Write-Host "Setting encoding for Windows..."
        $env:PYTHONIOENCODING = "utf-8"
        $env:PYTHONUTF8 = "1"
        
        Write-Host "Building Windows executable..."
        if [ -f "build_utf8.spec" ]; then
          python -m PyInstaller build_utf8.spec
        else
          python -m PyInstaller --onefile --windowed --name "英语学习助手" --hidden-import=tkinter --hidden-import=tkinter.ttk main.py
        fi
    
    - name: Build executable (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Building on macOS..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Setting encoding for macOS..."
        export PYTHONIOENCODING=utf-8
        export PYTHONUTF8=1
        export LANG=en_US.UTF-8
        export LC_ALL=en_US.UTF-8
        
        echo "Building macOS executable..."
        if [ -f "build_utf8.spec" ]; then
          python -m PyInstaller build_utf8.spec
        elif [ -f "build_mac.spec" ]; then
          python -m PyInstaller build_mac.spec
        else
          echo "spec files not found, using default spec..."
          python -m PyInstaller --onefile --windowed --name "英语学习助手" --hidden-import=tkinter --hidden-import=tkinter.ttk main.py
        fi
    
    - name: Build executable (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Building on Linux..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Setting encoding for Linux..."
        export PYTHONIOENCODING=utf-8
        export PYTHONUTF8=1
        export LANG=en_US.UTF-8
        export LC_ALL=en_US.UTF-8
        
        echo "Building Linux executable..."
        if [ -f "build_utf8.spec" ]; then
          python -m PyInstaller build_utf8.spec
        else
          python -m PyInstaller --onefile --name "英语学习助手" --hidden-import=tkinter --hidden-import=tkinter.ttk main.py
        fi
    
    - name: List build artifacts (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "Build artifacts:"
        if (Test-Path "dist") {
          Get-ChildItem dist/
          Write-Host "Executable size:"
          Get-ChildItem dist/ | ForEach-Object { Write-Host "$($_.Name): $([math]::Round($_.Length/1MB, 2)) MB" }
        } else {
          Write-Host "dist directory not found!"
          Get-ChildItem
        }
    
    - name: List build artifacts (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Build artifacts:"
        if [ -d "dist" ]; then
          ls -la dist/
          echo "Executable size:"
          du -h dist/*
        else
          echo "dist directory not found!"
          ls -la
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 英语学习助手-${{ runner.os }}
        path: dist/
        retention-days: 30
        if-no-files-found: error 